<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP 4.3.2 or newer
 *
 * @package        CodeIgniter
 * @author        Rick Ellis
 * @copyright    Copyright (c) 2006, EllisLab, Inc.
 * @license        http://www.codeignitor.com/user_guide/license.html
 * @link        http://www.codeigniter.com
 * @since        Version 1.0
 * @filesource
 */

// ------------------------------------------------------------------------

/**
 * CodeIgniter Config Class
 *
 * This class contains functions that enable config files to be managed
 *
 * @package        CodeIgniter
 * @subpackage    Libraries
 * @category    Libraries
 * @author        Rick Ellis
 * @link        http://www.codeigniter.com/user_guide/libraries/config.html
 */
class CI_Config {

    public $config = array(
        /*
        |--------------------------------------------------------------------------
        | Index File
        |--------------------------------------------------------------------------
        | Typically this will be your index.php file, unless you've renamed it to
        | something else. If you are using mod_rewrite to remove the page set this
        | variable so that it is blank. This is set below in the constructor since
        | its value is set via an expression.
        */
        'index_page' => '',

        /*
        |--------------------------------------------------------------------------
        | URI PROTOCOL
        |--------------------------------------------------------------------------
        | This item determines which server global should be used to retrieve the
        | URI string.  The default setting of "AUTO" works for most servers.
        | If your links do not seem to work, try one of the other delicious flavors:
        |
        | 'AUTO'            Default - auto detects
        | 'PATH_INFO'        Uses the PATH_INFO
        | 'QUERY_STRING'    Uses the QUERY_STRING
        | 'REQUEST_URI'        Uses the REQUEST_URI
        | 'ORIG_PATH_INFO'    Uses the ORIG_PATH_INFO
        */
        'uri_protocol' => 'QUERY_STRING',

        /*
        |--------------------------------------------------------------------------
        | URL suffix
        |--------------------------------------------------------------------------
        | This option allows you to add a suffix to all URLs generated by CodeIgniter.
        | For more information please see the user guide:
        | http://www.codeigniter.com/user_guide/general/urls.html
        */
        'url_suffix' => '',

        /*
        |--------------------------------------------------------------------------
        | Default Language
        |--------------------------------------------------------------------------
        | This determines which set of language files should be used. Make sure
        | there is an available translation if you intend to use something other
        | than english.
        */
        'language' => 'english',

        /*
        |--------------------------------------------------------------------------
        | Default Character Set
        |--------------------------------------------------------------------------
        | This determines which character set is used by default in various methods
        | that require a character set to be provided.
        */
        'charset' => 'UTF-8',

        /*
        |--------------------------------------------------------------------------
        | Enable/Disable System Hooks
        |--------------------------------------------------------------------------
        | If you would like to use the "hooks" feature you must enable it by
        | setting this variable to TRUE (boolean).  See the user guide for details.
        */
        'enable_hooks' => true,

        /*
        |--------------------------------------------------------------------------
        | Class Extension Prefix
        |--------------------------------------------------------------------------
        | This item allows you to set the filename/classname prefix when extending
        | native libraries.  For more information please see the user guide:
        | http://www.codeigniter.com/user_guide/general/core_classes.html
        | http://www.codeigniter.com/user_guide/general/creating_libraries.html
        */
        'subclass_prefix' => '',

        /*
        |--------------------------------------------------------------------------
        | Allowed URL Characters
        |--------------------------------------------------------------------------
        | This lets you specify which characters are permitted within your URLs.
        | When someone tries to submit a URL with disallowed characters they will
        | get a warning message.
        | As a security measure you are STRONGLY encouraged to restrict URLs to
        | as few characters as possible.  By default only these are allowed: a-z 0-9~%.:_-
        | Leave blank to allow all characters -- but only if you are insane. <-- GOOD THING WE ARE!
        | DO NOT CHANGE THIS UNLESS YOU FULLY UNDERSTAND THE REPERCUSSIONS!! <-- GOOD THING WE DO!
        */
        'permitted_uri_chars' => '',

        /*
        |--------------------------------------------------------------------------
        | Enable Query Strings
        |--------------------------------------------------------------------------
        | By default CodeIgniter uses search-engine friendly segment based URLs:
        | www.your-site.com/who/what/where/
        | You can optionally enable standard query string based URLs:
        | www.your-site.com?who=me&what=something&where=here
        | Options are: TRUE or FALSE (boolean)
        | The two other items let you set the query string "words" that will
        | invoke your controllers and its functions:
        | www.your-site.com/index.php?c=controller&m=function
        | Please note that some of the helpers won't work as expected when
        | this feature is enabled, since CodeIgniter is designed primarily to
        | use segment based URLs.
        */
        'enable_query_strings' => false,
        'controller_trigger' => 'c',
        'function_trigger' => 'm',

        /*
        |--------------------------------------------------------------------------
        | Error Logging Threshold
        |--------------------------------------------------------------------------
        | If you have enabled error logging, you can set an error threshold to
        | determine what gets logged. Threshold options are:
        | You can enable error logging by setting a threshold over zero. The
        | threshold determines what gets logged. Threshold options are:
        |
        |    0 = Disables logging, Error logging TURNED OFF
        |    1 = Error Messages (including PHP errors)
        |    2 = Debug Messages
        |    3 = Informational Messages
        |    4 = All Messages
        |
        | For a live site you'll usually only enable Errors (1) to be logged otherwise
        | your log files will fill up very fast.
        */
        'log_threshold' => 0,

        /*
        |--------------------------------------------------------------------------
        | Error Logging Directory Path
        |--------------------------------------------------------------------------
        | Leave this BLANK unless you would like to set something other than the default
        | system/logs/ folder.  Use a full server path with trailing slash.
        */
        'log_path' => '',

        /*
        |--------------------------------------------------------------------------
        | Date Format for Logs
        |--------------------------------------------------------------------------
        | Each item that is logged has an associated date. You can use PHP date
        | codes to set your own date formatting
        */
        'log_date_format' => 'Y-m-d H:i:s',

        /*
        |--------------------------------------------------------------------------
        | Cache Directory Path
        |--------------------------------------------------------------------------
        | Leave this BLANK unless you would like to set something other than the default
        | system/cache/ folder.  Use a full server path with trailing slash.
        */
        'cache_path' => '',

        /*
        |--------------------------------------------------------------------------
        | Encryption Key
        |--------------------------------------------------------------------------
        | If you use the Encryption class or the Sessions class with encryption
        | enabled you MUST set an encryption key.  See the user guide for info.
        */
        'encryption_key' => '',

         /*
        |--------------------------------------------------------------------------
        | Session Variables
        |--------------------------------------------------------------------------
        | 'session_cookie_name' = the name you want for the cookie
        | 'encrypt_sess_cookie' = TRUE/FALSE (boolean).  Whether to encrypt the cookie
        | 'session_expiration'  = the number of SECONDS you want the session to last.
        |  by default sessions last 7200 seconds (two hours).  Set to zero for no expiration.
        */
        'sess_cookie_name' => 'ci_session',
        'sess_expiration' => 86400,
        'sess_encrypt_cookie' => true,
        'sess_use_database' => false,
        'sess_table_name' => '',
        'sess_match_ip' => false,
        'sess_match_useragent' => true,

        /*
        |--------------------------------------------------------------------------
        | Cookie Related Variables
        |--------------------------------------------------------------------------
        | 'cookie_prefix' = Set a prefix if you need to avoid collisions
        | 'cookie_domain' = Set to .your-domain.com for site-wide cookies
        | 'cookie_path'   =  Typically will be a forward slash
        */
        'cookie_prefix' => '',
        'cookie_domain' => '',
        'cookie_path' => '/',

        /*
        |--------------------------------------------------------------------------
        | Global XSS Filtering
        |--------------------------------------------------------------------------
        | Determines whether the XSS filter is always active when GET, POST or
        | COOKIE data is encountered
        */
        'global_xss_filtering' => false,

        /*
        |--------------------------------------------------------------------------
        | Output Compression
        |--------------------------------------------------------------------------
        | Enables Gzip output compression for faster page loads.  When enabled,
        | the output class will test whether your server supports Gzip.
        | Even if it does, however, not all browsers support compression
        | so enable only if you are reasonably sure your visitors can handle it.
        | VERY IMPORTANT:  If you are getting a blank page when compression is enabled it
        | means you are prematurely outputting something to your browser. It could
        | even be a line of whitespace at the end of one of your scripts.  For
        | compression to work, nothing can be sent before the output buffer is called
        | by the output class.  Do not "echo" any values with compression enabled.
        */
        'compress_output' => false,

        /*
        |--------------------------------------------------------------------------
        | Master Time Reference
        |--------------------------------------------------------------------------
        | Options are "local" or "gmt".  This pref tells the system whether to use
        | your server's local time as the master "now" reference, or convert it to
        | GMT.  See the "date helper" page of the user guide for information
        | regarding date handling.
        */
        'time_reference' => 'local',

        /*
        |--------------------------------------------------------------------------
        | Rewrite PHP Short Tags
        |--------------------------------------------------------------------------
        | If your PHP installation does not have short tag support enabled CI
        | can rewrite the tags on-the-fly, enabling you to utilize that syntax
        | in your view files.  Options are TRUE or FALSE (boolean)
        */
        'rewrite_short_tags' => false,

        /*****RNT CONFIG SECTION*****/

        /*
        |--------------------------------------------------------------------------
        | suffix
        |--------------------------------------------------------------------------
        | The suffix setting holds a counter for an entire page. The counter
        | is used as a suffix to all ID's for that widget html. This allows multiple
        | instances of the same widget to be placed on a page. The counter is also used
        | for tab indexes. This value is incremented every time a widget is placed on
        | the page.
        */
        'w_id' => 0,

        /*
        |--------------------------------------------------------------------------
        | Parameter Segment Location
        |--------------------------------------------------------------------------
        | This number denotes which segment is the start of parameters in the page. This
        | value is set up in the page controller and will be used by widgets to know where
        | the parameters of a page begin. Default is 3.
        */
        'parm_segment' => 3,

        /*
        |--------------------------------------------------------------------------
        | Widget Instance IDs
        |--------------------------------------------------------------------------
        | Array to keep track of all defined values for the instanceID widget attributes. Duplicate
        | values are not allowed so we store the values during runtime in order to throw an error
        | if two widgets contain the same value.
        */
        'widgetInstanceIDs' => array(),
    );

    public $is_loaded = array();

    /**
     * Constructor
     *
     * Sets the $config data from the primary config.php file as a class variable
     *
     * @access   public
     * @param   string    the config file name
     * @param   boolean  if configuration values should be loaded into their own section
     * @param   boolean  true if errors should just return false, false if an error message should be displayed
     * @return  boolean  if the file was successfully loaded or not
     */
    function __construct()
    {

        /* Ernie: Since we've already started editing CI source code, theres no need to have the
           config details in another file so I've set them above except for index_page, which requires
           the use of an expression to set.
        $this->config =& get_config();
        */
        $this->config['index_page'] = SELF . '?';
        log_message('debug', "Config Class Initialized");
    }

    // --------------------------------------------------------------------

    /**
     * Load Config File
     *
     * @access    public
     * @param    string    the config file name
     * @return    boolean    if the file was loaded correctly
     */
    function load($file = '', $use_sections = FALSE, $fail_gracefully = FALSE)
    {
        $file = ($file == '') ? 'config' : str_replace(EXT, '', $file);

        if (in_array($file, $this->is_loaded, TRUE))
        {
            return TRUE;
        }

        if ( ! is_readable(CPCORE.'config/'.$file.EXT))
        {
            if ($fail_gracefully === TRUE)
            {
                return FALSE;
            }
            show_error('The configuration file '.$file.EXT.' does not exist.');
        }

        include(CPCORE.'config/'.$file.EXT);

        if ( ! isset($config) OR ! is_array($config))
        {
            if ($fail_gracefully === TRUE)
            {
                return FALSE;
            }
            show_error('Your '.$file.EXT.' file does not appear to contain a valid configuration array.');
        }

        if ($use_sections === TRUE)
        {
            if (isset($this->config[$file]))
            {
                $this->config[$file] = array_merge($this->config[$file], $config);
            }
            else
            {
                $this->config[$file] = $config;
            }
        }
        else
        {
            $this->config = array_merge($this->config, $config);
        }

        $this->is_loaded[] = $file;
        unset($config);

        log_message('debug', 'Config file loaded: config/'.$file.EXT);
        return TRUE;
    }

    // --------------------------------------------------------------------

    /**
     * Fetch a config file item
     *
     *
     * @access    public
     * @param    string    the config item name
     * @param    string    the index name
     * @param    bool
     * @return    string
     */
    function item($item, $index = '')
    {
        if ($index == '')
        {
            if ( ! isset($this->config[$item]))
            {
                return FALSE;
            }

            $pref = $this->config[$item];
        }
        else
        {
            if ( ! isset($this->config[$index]))
            {
                return FALSE;
            }

            if ( ! isset($this->config[$index][$item]))
            {
                return FALSE;
            }

            $pref = $this->config[$index][$item];
        }

        return $pref;
    }

      // --------------------------------------------------------------------

    // I replaced this entire function with its equivalent from CI v 1.7.2 in order to avoid calls to functions which were deprecated in PHP 5.3.
    /**
     * Fetch a config file item - adds slash after item
     *
     * The second parameter allows a slash to be added to the end of
     * the item, in the case of a path.
     *
     * @access  public
     * @param   string  the config item name
     * @param   bool
     * @return  string
     */
    function slash_item($item)
    {
        if ( ! isset($this->config[$item]))
        {
            return FALSE;
        }

        $pref = $this->config[$item];

        if ($pref != '' && substr($pref, -1) != '/')
        {
            $pref .= '/';
        }

        return $pref;
    }


    // --------------------------------------------------------------------

    /**
     * Site URL
     *
     * @access    public
     * @param    string    the URI string
     * @return    string
     */
    function site_url($uri = '')
    {
        if (is_array($uri))
        {
            $uri = implode('/', $uri);
        }

        if ($uri == '')
        {
            return $this->slash_item('base_url').$this->item('index_page');
        }
        else
        {
            $suffix = ($this->item('url_suffix') == FALSE) ? '' : $this->item('url_suffix');
            return $this->slash_item('base_url').$this->slash_item('index_page').preg_replace("|^/*(.+?)/*$|", "\\1", $uri).$suffix;
        }
    }

    // --------------------------------------------------------------------

    /**
     * System URL
     *
     * @access    public
     * @return    string
     */
    function system_url()
    {
        $x = explode("/", preg_replace("|/*(.+?)/*$|", "\\1", BASEPATH));
        return $this->slash_item('base_url').end($x).'/';
    }

    // --------------------------------------------------------------------

    /**
     * Set a config file item
     *
     * @access    public
     * @param    string    the config item key
     * @param    string    the config item value
     * @return    void
     */
    function set_item($item, $value)
    {
        $this->config[$item] = $value;
    }

}

// END CI_Config class
?>
